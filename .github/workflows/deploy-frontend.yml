name: Deploy Frontend to AWS

on:
  push:
    branches: [ main ]
    paths: [ 'frontend/**' ]
  workflow_dispatch:

env:
  AWS_REGION: af-south-1

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    
    # Add OIDC permissions
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-frontend-deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Get server IPs
      id: get-ips
      run: |
        API_IP=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --filters "Name=tag:Name,Values=nrn-api-grad-group01-dev" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        WEB_IP=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --filters "Name=tag:Name,Values=nrn-web-grad-group01-dev" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "api_ip=$API_IP" >> $GITHUB_OUTPUT
        echo "web_ip=$WEB_IP" >> $GITHUB_OUTPUT

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      env:
        VITE_API_URL: http://${{ steps.get-ips.outputs.api_ip }}
      run: npm run build

    - name: Deploy to Web server
      env:
        WEB_IP: ${{ steps.get-ips.outputs.web_ip }}
      run: |
        # Create deployment package
        tar -czf frontend-deploy.tar.gz -C frontend/dist .
        
        # Setup SSH
        echo "${{ secrets.TEAM_SSH_KEY }}" > team-key
        chmod 600 team-key
        
        # Copy files to server
        scp -i team-key -o StrictHostKeyChecking=no frontend-deploy.tar.gz ec2-user@$WEB_IP:/home/ec2-user/
        
        # Deploy on server
        ssh -i team-key -o StrictHostKeyChecking=no ec2-user@$WEB_IP << 'EOF'
          # Install and configure nginx
          sudo amazon-linux-extras install nginx1 -y
          sudo systemctl enable nginx

          # Ensure nginx user exists
          sudo useradd -r nginx 2>/dev/null || true
          
          # Deploy frontend files
          sudo rm -rf /var/www/html/*
          sudo mkdir -p /var/www/html
          sudo tar -xzf /home/ec2-user/frontend-deploy.tar.gz -C /var/www/html
          sudo chown -R nginx:nginx /var/www/html
          
          # Configure nginx for SPA (Single Page Application)
          sudo tee /etc/nginx/conf.d/default.conf > /dev/null << 'EOL'
          server {
              listen 80;
              server_name _;
              root /var/www/html;
              index index.html;
              
              # Handle SPA routing
              location / {
                  try_files \$uri \$uri/ /index.html;
              }
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
          }
          EOL
          
          # Remove default nginx config
          sudo rm -f /etc/nginx/conf.d/default.conf.bak
          
          # Test and start nginx
          sudo nginx -t && sudo systemctl restart nginx
        EOF

        rm -f team-key frontend-deploy.tar.gz

    - name: Health check
      env:
        WEB_IP: ${{ steps.get-ips.outputs.web_ip }}
      run: |
        # Wait for nginx to start
        sleep 10
        
        # Check if frontend is responding
        curl -f http://$WEB_IP || exit 1
        echo "âœ… Frontend deployed successfully!"