name: Deploy Frontend to AWS

on:
  push:
    branches: [ main, infrastructure ]  # Added infrastructure branch for testing
    paths: [ 'frontend/**' ]
  workflow_dispatch:

env:
  AWS_REGION: af-south-1

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    
    # Add OIDC permissions
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-frontend-deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Get server IPs and CloudFront DNS
      id: get-endpoints
      run: |
        API_IP=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --filters "Name=tag:Name,Values=nrn-api-grad-group01-dev" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        WEB_IP=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --filters "Name=tag:Name,Values=nrn-web-grad-group01-dev" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        CLOUDFRONT_DOMAIN=$(aws cloudfront list-distributions \
          --region ${{ env.AWS_REGION }} \
          --query 'DistributionList.Items[?contains(Comment, `nrn-cloudfront-grad-group01-dev`) || contains(Tags.Items[?Key==`Name`].Value, `nrn-cloudfront-grad-group01-dev`)].DomainName' \
          --output text | head -1)
        
        if [ -z "$CLOUDFRONT_DOMAIN" ]; then
          echo "Warning: CloudFront domain not found, falling back to ALB"
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --region ${{ env.AWS_REGION }} \
            --names "nrn-alb-grad-group01-dev" \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          CLOUDFRONT_DOMAIN="$ALB_DNS"
        fi
        
        echo "api_ip=$API_IP" >> $GITHUB_OUTPUT
        echo "web_ip=$WEB_IP" >> $GITHUB_OUTPUT
        echo "cloudfront_domain=$CLOUDFRONT_DOMAIN" >> $GITHUB_OUTPUT

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      env:
        VITE_API_URL: https://${{ steps.get-endpoints.outputs.cloudfront_domain }}/api
      run: npm run build

    - name: Deploy to Web server
      env:
        WEB_IP: ${{ steps.get-endpoints.outputs.web_ip }}
      run: |
        # Create deployment package
        tar -czf frontend-deploy.tar.gz -C frontend/dist .
        
        # Setup SSH
        echo "${{ secrets.TEAM_SSH_KEY }}" > team-key
        chmod 600 team-key
        
        # Copy files to server
        scp -i team-key -o StrictHostKeyChecking=no frontend-deploy.tar.gz ubuntu@$WEB_IP:/home/ubuntu/
        
        # Deploy on server
        ssh -i team-key -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ubuntu@$WEB_IP << 'EOF'
          set -e  # Exit on any error
          
          # Install Node.js 18 (Ubuntu 22.04 compatible)
          if ! node --version | grep -q "v18"; then
            echo "Installing Node.js 18 on Ubuntu 22.04..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Verify Node.js installation
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
          # Stop any existing application - more aggressive cleanup
          sudo pkill -f "serve" || echo "No serve processes to kill"
          pm2 stop all || echo "PM2 already stopped"
          pm2 delete all || echo "PM2 already clean"
          pm2 kill || echo "PM2 already clean"
          
          # Deploy frontend files
          rm -rf /home/ubuntu/frontend
          mkdir -p /home/ubuntu/frontend
          tar -xzf /home/ubuntu/frontend-deploy.tar.gz -C /home/ubuntu/frontend
          
          # Install nginx if not already installed
          sudo apt-get update
          sudo apt-get install -y nginx
          
          # Deploy files to nginx directory
          sudo rm -rf /var/www/html/*
          sudo cp -r /home/ubuntu/frontend/* /var/www/html/
          
          # Restart nginx to serve the files
          sudo systemctl restart nginx
          sudo systemctl enable nginx
          
          echo "âœ… Frontend deployment completed successfully"
          echo "ðŸŽ¯ Workflow finishing now..."
        EOF

        rm -f team-key frontend-deploy.tar.gz