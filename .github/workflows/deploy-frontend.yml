name: Deploy Frontend to AWS

on:
  push:
    branches: [ main, infrastructure ]  # Added infrastructure branch for testing
    paths: [ 'frontend/**' ]
  workflow_dispatch:

env:
  AWS_REGION: af-south-1

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    
    # Add OIDC permissions
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-frontend-deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Get server IPs and ALB DNS
      id: get-endpoints
      run: |
        API_IP=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --filters "Name=tag:Name,Values=nrn-api-grad-group01-dev" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        WEB_IP=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --filters "Name=tag:Name,Values=nrn-web-grad-group01-dev" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --region ${{ env.AWS_REGION }} \
          --names "nrn-alb-grad-group01-dev" \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        echo "api_ip=$API_IP" >> $GITHUB_OUTPUT
        echo "web_ip=$WEB_IP" >> $GITHUB_OUTPUT
        echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      env:
        VITE_API_URL: http://${{ steps.get-endpoints.outputs.alb_dns }}/api
      run: npm run build

    - name: Deploy to Web server
      env:
        WEB_IP: ${{ steps.get-endpoints.outputs.web_ip }}
      run: |
        # Create deployment package
        tar -czf frontend-deploy.tar.gz -C frontend/dist .
        
        # Setup SSH
        echo "${{ secrets.TEAM_SSH_KEY }}" > team-key
        chmod 600 team-key
        
        # Copy files to server
        scp -i team-key -o StrictHostKeyChecking=no frontend-deploy.tar.gz ubuntu@$WEB_IP:/home/ubuntu/
        
        # Deploy on server
        ssh -i team-key -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ubuntu@$WEB_IP << 'EOF'
          set -e  # Exit on any error
          
          # Install Node.js 18 (Ubuntu 22.04 compatible)
          if ! node --version | grep -q "v18"; then
            echo "Installing Node.js 18 on Ubuntu 22.04..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Verify Node.js installation
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
          # Stop any existing application
          sudo pkill -f "serve" || true
          pm2 stop frontend || true
          pm2 delete frontend || true
          
          # Deploy frontend files
          rm -rf /home/ubuntu/frontend
          mkdir -p /home/ubuntu/frontend
          tar -xzf /home/ubuntu/frontend-deploy.tar.gz -C /home/ubuntu/frontend
          cd /home/ubuntu/frontend
          
          # Install serve and PM2 globally
          sudo npm install -g serve pm2@latest
          
          # Start the frontend on port 3000 using PM2 with robust fallback
          if ! pm2 start "serve -s . -l 3000" --name "frontend"; then
            echo "First PM2 approach failed, trying alternative for frontend..."
            # Alternative approach: create a simple start script
            echo '#!/bin/bash' > start-frontend.sh
            echo 'cd /home/ubuntu/frontend' >> start-frontend.sh
            echo 'exec serve -s . -l 3000' >> start-frontend.sh
            chmod +x start-frontend.sh
            pm2 start ./start-frontend.sh --name "frontend"
          fi
          
          pm2 save
          
          # Setup PM2 startup script
          sudo pm2 startup systemd -u ubuntu --hp /home/ubuntu || true
          
          # Show PM2 status for debugging
          echo "=== PM2 Status ==="
          pm2 status
          echo "=== PM2 Logs ==="
          pm2 logs frontend --lines 5 || true
          
          echo "✅ Frontend deployment completed successfully"
        EOF

        rm -f team-key frontend-deploy.tar.gz

    - name: Health check
      env:
        WEB_IP: ${{ steps.get-endpoints.outputs.web_ip }}
      run: |
        # Wait for serve to start properly
        echo "⏳ Waiting for serve to start..."
        sleep 30
        
        # Try health check multiple times with better error handling
        for i in {1..6}; do
          echo "🔍 Health check attempt $i/6 for http://$WEB_IP:3000"
          
          # Try to connect and get response
          if curl -f -m 15 -v http://$WEB_IP:3000 2>&1; then
            echo "✅ Frontend deployed successfully!"
            exit 0
          fi
          
          echo "❌ Health check failed, retrying in 15 seconds..."
          sleep 15
        done
        
        echo "🚨 Health check failed after 6 attempts. Checking server status..."
        
        # Setup SSH key for debugging
        echo "${{ secrets.TEAM_SSH_KEY }}" > team-key
        chmod 600 team-key
        
        # SSH back to server to check what's wrong
        ssh -i team-key -o StrictHostKeyChecking=no ec2-user@$WEB_IP << 'EOF'
          echo "=== PM2 Status ==="
          pm2 status
          
          echo "=== PM2 Frontend Logs ==="
          pm2 logs frontend --lines 20 || echo "No frontend logs found"
          
          echo "=== Checking if serve is listening on port 3000 ==="
          sudo netstat -tlnp | grep :3000 || sudo ss -tlnp | grep :3000 || echo "No process listening on port 3000"
          
          echo "=== Checking serve processes ==="
          ps aux | grep serve || echo "No serve processes found"
          
          echo "=== Checking frontend directory contents ==="
          ls -la /home/ec2-user/frontend/ || echo "Frontend directory not found"
          
          echo "=== Checking if index.html exists ==="
          cat /home/ec2-user/frontend/index.html | head -10 || echo "index.html not found"
          
          echo "=== System resources ==="
          free -h
          df -h
        EOF
        
        # Clean up SSH key
        rm -f team-key
        exit 1