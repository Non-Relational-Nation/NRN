name: Deploy Backend to AWS

on:
  push:
    branches: [ main ]
    paths: [ 'backend/**' ]
  workflow_dispatch:

env:
  AWS_REGION: af-south-1

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    # Add OIDC permissions
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Build application
      working-directory: ./backend
      run: npm run build

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-backend-deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Get API server IP
      id: get-api-ip
      run: |
        API_IP=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --filters "Name=tag:Name,Values=nrn-api-grad-group01-dev" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        echo "api_ip=$API_IP" >> $GITHUB_OUTPUT

    - name: Deploy to API server
      env:
        API_IP: ${{ steps.get-api-ip.outputs.api_ip }}
      run: |
        # Create deployment package
        tar -czf backend-deploy.tar.gz -C backend .
        
        # Setup SSH
        echo "${{ secrets.TEAM_SSH_KEY }}" > team-key
        chmod 600 team-key
        
        # Copy files to server
        scp -i team-key -o StrictHostKeyChecking=no backend-deploy.tar.gz ec2-user@$API_IP:/home/ec2-user/
        
        # Deploy on server
        ssh -i team-key -o StrictHostKeyChecking=no ec2-user@$API_IP << 'EOF'
          # Stop existing application
          sudo pkill -f "node.*app" || true
          pm2 stop backend || true
          
          # Update Node.js to version 18 if needed (compatible with Amazon Linux 2)
          if ! node --version | grep -q "v18"; then
            echo "Installing Node.js 18 via Node Version Manager (NVM)..."
            # Install NVM if not present
            if [ ! -d "$HOME/.nvm" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            else
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            fi
            
            # Install and use Node.js 18 (compatible with glibc 2.26)
            nvm install 18
            nvm use 18
            nvm alias default 18
            
            # Make sure node and npm are in PATH
            export PATH="$NVM_DIR/versions/node/$(nvm version)/bin:$PATH"
            echo "Node.js version after install: $(node --version)"
          else
            echo "Node.js 18 already installed: $(node --version)"
          fi
          
          # Ensure Node.js and npm are available for subsequent commands
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          export PATH="$NVM_DIR/versions/node/$(nvm version)/bin:$PATH"
          
          # Extract new code
          rm -rf /home/ec2-user/backend
          mkdir -p /home/ec2-user/backend
          tar -xzf /home/ec2-user/backend-deploy.tar.gz -C /home/ec2-user/backend
          cd /home/ec2-user/backend
          
          # Install dependencies (including dev dependencies for build)
          echo "Installing dependencies..."
          # Ensure we're using the correct Node.js version
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          export PATH="$NVM_DIR/versions/node/$(nvm version)/bin:$PATH"
          
          npm ci || { echo "npm ci failed"; exit 1; }
          
          # Build the application
          echo "Building application..."
          npm run build || { echo "Build failed"; exit 1; }
          
          # Set environment variables
          cat > .env << EOL
          NODE_ENV=production
          PORT=5000
          HOST=0.0.0.0
          MONGODB_URI=${{ secrets.MONGODB_CONNECTION_STRING }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION=${{ env.AWS_REGION }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          EOL
          
          # Install PM2 globally if not exists
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          export PATH="$NVM_DIR/versions/node/$(nvm version)/bin:$PATH"
          
          npm install -g pm2 || true
          
          # Start application with PM2 using the built JS file
          pm2 start dist/server.js --name "backend" --env production
          pm2 save
          
          # Setup PM2 startup script (use NVM node path)
          NODE_PATH="$NVM_DIR/versions/node/$(nvm version)/bin/node"
          sudo env PATH="$NVM_DIR/versions/node/$(nvm version)/bin:$PATH" pm2 startup systemd -u ec2-user --hp /home/ec2-user || true
          
          # Show PM2 status and logs for debugging
          pm2 status
          pm2 logs backend --lines 10
        EOF

    - name: Health check
      env:
        API_IP: ${{ steps.get-api-ip.outputs.api_ip }}
      run: |
        # Wait for application to start
        echo "⏳ Waiting for application to start..."
        sleep 30
        
        # Try health check endpoint multiple times
        for i in {1..5}; do
          echo "🔍 Health check attempt $i/5..."
          if curl -f -m 10 http://$API_IP:5000/health; then
            echo "✅ Backend deployed successfully!"
            exit 0
          fi
          echo "❌ Health check failed, retrying in 10 seconds..."
          sleep 10
        done
        
        echo "🚨 Health check failed after 5 attempts. Checking server logs..."
        # SSH back to server to check logs
        ssh -i team-key -o StrictHostKeyChecking=no ec2-user@$API_IP << 'EOF'
          echo "=== PM2 Status ==="
          pm2 status
          echo "=== PM2 Logs ==="
          pm2 logs backend --lines 20
        EOF
        exit 1