name: Deploy Backend to AWS

on:
  push:
    branches: [ main, infrastructure ]  # Added infrastructure branch for testing
    paths: [ 'backend/**' ]
  workflow_dispatch:

env:
  AWS_REGION: af-south-1

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    # Add OIDC permissions
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Type check application
      working-directory: ./backend
      run: npx tsc --noEmit

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-backend-deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Get API server IP
      id: get-api-ip
      run: |
        echo "Looking for API server instance..."
        API_IP=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --filters "Name=tag:Name,Values=nrn-api-grad-group01-dev" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        if [ "$API_IP" = "None" ] || [ -z "$API_IP" ]; then
          echo "ERROR: No running API instance found!"
          echo "Checking all instances..."
          aws ec2 describe-instances \
            --region ${{ env.AWS_REGION }} \
            --filters "Name=tag:Name,Values=nrn-api-grad-group01-dev" \
            --query 'Reservations[].Instances[].[InstanceId,State.Name,PublicIpAddress]' \
            --output table
          exit 1
        fi
        
        echo "Found API server at: $API_IP"
        
        # Debug: Check what key pair is assigned to the instance
        echo "=== Checking instance key pair ==="
        INSTANCE_ID=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --filters "Name=tag:Name,Values=nrn-api-grad-group01-dev" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].InstanceId' \
          --output text)
        
        KEY_NAME=$(aws ec2 describe-instances \
          --region ${{ env.AWS_REGION }} \
          --instance-ids $INSTANCE_ID \
          --query 'Reservations[0].Instances[0].KeyName' \
          --output text)
        
        echo "Instance ID: $INSTANCE_ID"
        echo "Key pair name: $KEY_NAME"
        
        echo "api_ip=$API_IP" >> $GITHUB_OUTPUT

    - name: Deploy to API server
      env:
        API_IP: ${{ steps.get-api-ip.outputs.api_ip }}
      run: |
        # Create deployment package
        tar -czf backend-deploy.tar.gz -C backend .
        
        # Setup SSH with new clean approach
        echo "${{ secrets.TEAM_SSH_KEY }}" > team-key
        chmod 600 team-key
        
        # Fix potential line ending issues
        sed -i 's/\r$//' team-key
        
        # Test connection before proceeding
        echo "Testing SSH connection..."
        ssh -i team-key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$API_IP "echo 'Connection successful'"
        
        # Copy files to server
        echo "Copying deployment package to server..."
        scp -i team-key -o StrictHostKeyChecking=no backend-deploy.tar.gz ubuntu@$API_IP:/home/ubuntu/
        
        # Deploy on server
        ssh -i team-key -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ubuntu@$API_IP << 'EOF'
          set -e  # Exit on any error
          
          # Stop existing application - nuclear cleanup (ensure all commands succeed)
          sudo pkill -9 -f "node" || echo "No node processes to kill"
          sudo pkill -9 -f "tsx" || echo "No tsx processes to kill"
          sudo pkill -9 -f "pm2" || echo "No pm2 processes to kill"
          sudo killall node || echo "No node processes to killall"
          sudo killall tsx || echo "No tsx processes to killall"
          pm2 kill || echo "PM2 already clean"
          sleep 5
          
          # Free up port 3001 specifically
          sudo fuser -k 3001/tcp || echo "Port 3001 already free"
          sudo netstat -tlnp | grep :3001 | awk '{print $7}' | cut -d/ -f1 | xargs -r sudo kill -9 || echo "No processes on port 3001"
          sleep 2
          
          # Install Node.js 22 (Ubuntu 22.04)
          echo "Setting up Node.js 22 on Ubuntu 22.04..."
          
          # Install Node.js 22 from NodeSource (Ubuntu compatible)
          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Verify installation
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
          # Extract new code - clean deployment
          rm -rf /home/ubuntu/backend || true
          mkdir -p /home/ubuntu/backend
          tar -xzf /home/ubuntu/backend-deploy.tar.gz -C /home/ubuntu/backend
          cd /home/ubuntu/backend
          
          # Install dependencies
          echo "Installing dependencies..."
          npm ci || npm install
          
          # Create environment file
          echo "Creating environment configuration..."
          echo "NODE_ENV=production" > .env
          echo "PORT=3001" >> .env
          echo "HOST=0.0.0.0" >> .env
          echo "FRONTEND_URL=https://dikiudmyn4guv.cloudfront.net" >> .env
          echo "MONGODB_HOST=localhost" >> .env
          echo "MONGODB_PORT=27017" >> .env
          echo "MONGODB_DATABASE=nrn_db" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "NEO4J_URI=bolt://localhost:7687" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> .env 
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_REDIRECT_URL=https://dikiudmyn4guv.cloudfront.net/login/callback" >> .env
          
          # Install PM2 globally
          sudo npm install -g pm2@latest
          
          # Create logs directory
          mkdir -p logs
          
          # Start application with PM2 - single reliable approach with timeout
          timeout 30 pm2 start "npx tsx src/server.ts" --name "backend" --env production --force || echo "PM2 start completed"
          timeout 10 pm2 save || echo "PM2 save completed"
          
          # Verify only one instance is running
          sleep 3
          timeout 10 pm2 list || echo "PM2 list completed"
          echo "=== Verifying single instance ==="
          INSTANCE_COUNT=$(timeout 5 pm2 list | grep -c "backend" 2>/dev/null || echo "0")
          echo "Backend instances running: $INSTANCE_COUNT"
          
          # Show final status and exit cleanly
          echo "=== Deployment completed successfully ==="
          pm2 status || echo "PM2 status check completed"
          echo "âœ… Backend deployment finished successfully"
          
          # Setup PM2 startup script
          sudo pm2 startup systemd -u ubuntu --hp /home/ubuntu || true
          
          # Show PM2 status and logs for debugging
          echo "=== PM2 Status ==="
          pm2 status
          echo "=== PM2 Logs (last 10 lines) ==="
          timeout 5 pm2 logs backend --lines 10 --no-stream || echo "Log check completed"
          
          echo "âœ… Backend deployment completed successfully"
          echo "ðŸŽ¯ Workflow finishing now..."
        EOF